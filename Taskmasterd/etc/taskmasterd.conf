
[taskmasterd]
nodaemon=false															; Run as daemon									Values: (true, false, yes, no, 1, 0)
silent=false															; Suppress console output						Values: (true, false, yes, no, 1, 0)
user=1000																; User to run the process (de-escalation)		Values: (do not switch, username, userid)
umask=077																; File creation permissions						Values: (octal notation)
directory=$HERE															; Initial working directory						Values: (do not change, absolute or relative path; supports tilde expansion)
logfile=logfile.log														; Main log file									Values: (none, absolute or relative path; supports tilde expansion; file does not need to exist)
logfile_maxbytes=50MB													; Max log file size (rotation)					Values: (numeric value between 0 and 1GB; accepts bytes, B, KB, MB, or GB as suffix; does not accept fractional values such as 0.5GB)
logfile_backups=1000													; Number of log backups (rotation)				Values: (numeric value between 0 and 1000)
logfile_syslog=false													; Send logs to syslog							Values: (true, false, yes, no, 1, 0)
loglevel=debug															; Log verbosity level							Values: (0, debug, 1, info, 2, warning, warn, 3, error, 4, critical)
pidfile=pidfile.pid														; PID file location								Values: (absolute or relative path; supports tilde expansion; file does not need to exist)
identifier=taskmaster													; Process identifier							Values: (string value)
childlogdir=.															; Directory for child process logs				Values: (absolute or relative path; supports tilde expansion)
strip_ansi=true															; Remove ANSI codes from child logs				Values: (true, false, yes, no, 1, 0)
nocleanup=false															; Don't clean temp files on exit				Values: (true, false, yes, no, 1, 0)
minfds=512																; Minimum file descriptors						Values: (numeric value between 1 and 65535)
minprocs=100															; Minimum number of processes					Values: (numeric value between 1 and 10000)
environment=VAR1=VALUE1, VAR2="VALUE2 with variable \$USER = $USER"		; Global environment variables					Values: (key=value pairs, separated by commas)

[program:date]
command=date															; Command to execute							Values: (absolute or relative path, or a command in the PATH variable, optionally with arguments; supports tilde expansion; file must be executable)
process_name=${PROCESS_NAME}_${PROCESS_NUM:*02d}						; Process name									Values: (string value; if 'numprocs' is greater than 1, the value must contain the ${PROCESS_NUM} variable)
numprocs=3																; Number of instances							Values: (numeric value between 1 and 1000)
numprocs_start=0														;
directory=.																; Working directory								Values: (do not change, absolute or relative path; supports tilde expansion)
tty_mode=false															; Create a pseudo-terminal for the process		Values: (true, false, yes, no, 1, 0)
umask=077																; File creation permissions						Values: (octal notation)
priority=500															; Start priority								Values: (numeric value between 0 and 999)
autostart=true															; Start automatically							Values: (true, false, yes, no, 1, 0)
autorestart=unexpected													; Restart on exit								Values: (true, false, unexpected, always, never)
startsecs=5																; Seconds to consider started					Values: (numeric value between 0 and 3600)
startretries=5															; Restart attempts on failure					Values: (numeric value between 1 and 100)
exitcodes=0																; Exit codes considered successful				Values: (exit code, separated by commas)
stopsignal=TERM															; Signal to stop the process					Values: (1, HUP, SIGHUP, 2, INT, SIGINT, 3, QUIT, SIGQUIT, 9, KILL, SIGKILL, 15, TERM, SIGTERM, 10, USR1, SIGUSR1, 12, USR2, SIGUSR2)
stopwaitsecs=10															; Seconds to wait before killing the process	Values: (numeric value between 1 and 3600)
stopasgroup=true														; Stop process group							Values: (true, false, yes, no, 1, 0)
killasgroup=true														; Kill process group							Values: (true, false, yes, no, 1, 0)
user=1000																; User to run the process						Values: (do not switch, username, userid)
redirect_stderr=false													; Redirect stderr to stdout						Values: (true, false, yes, no, 1, 0)
stdout_logfile=$HOME/${PROCESS_NAME}_${PROCESS_NUM:*02d}_stdout.log		; Stdout log file								Values: (auto, none, absolute or relative path; supports tilde expansion; file does not need to exist)
stdout_logfile_maxbytes=1MB												; Max stdout log size (rotation)				Values: (numeric value between 0 and 1GB; accepts bytes, B, KB, MB, or GB as suffix; does not accept fractional values such as 0.5GB)
stdout_logfile_backups=10												; Stdout log backups (rotation)					Values: (numeric value between 0 and 1000)
stdout_logfile_syslog=true												; Send stdout to syslog							Values: (true, false, yes, no, 1, 0)
stderr_logfile=~/${PROCESS_NAME}_${PROCESS_NUM:*02d}_stderr.log			; Stderr log file								Values: (auto, none, absolute or relative path; supports tilde expansion; file does not need to exist)
stderr_logfile_maxbytes=1MB												; Max stderr log size (rotation)				Values: (numeric value between 0 and 1GB; accepts bytes, B, KB, MB, or GB as suffix; does not accept fractional values such as 0.5GB)
stderr_logfile_backups=10												; Stderr log backups (rotation)					Values: (numeric value between 0 and 1000)
stderr_logfile_syslog=false												; Send stderr to syslog							Values: (true, false, yes, no, 1, 0)
environment=VAR1='VALUE1 with spaces', VAR2=VALUE2\ with \ spaces		; Program environment variables					Values: (key=value pairs, separated by commas)
serverurl=unix://~/taskmaster.sock										; Server URL for communication (UNIX)			Values: (unix:// followed by absolute or relative path; supports tilde expansion; file does not need to exist)

[program:ls]
command=/bin/ls -a														; Command to execute							Values: (absolute or relative path, or a command in the PATH variable, optionally with arguments; supports tilde expansion; file must be executable)
process_name=ls with args												; Process name									Values: (string value; if 'numprocs' is greater than 1, the value must contain the ${PROCESS_NUM} variable)
numprocs_start=1														;
numprocs=1																; Number of instances							Values: (numeric value between 1 and 1000)
directory=~																; Working directory								Values: (do not change, absolute or relative path; supports tilde expansion)
tty_mode=false															; Create a pseudo-terminal for the process		Values: (true, false, yes, no, 1, 0)
umask=022																; File creation permissions						Values: (octal notation)
priority=600															; Start priority								Values: (numeric value between 0 and 999)
autostart=no															; Start automatically							Values: (true, false, yes, no, 1, 0)
autorestart=false														; Restart on exit								Values: (true, false, unexpected, always, never)
startsecs=1																; Seconds to consider started					Values: (numeric value between 0 and 3600)
startretries=0															; Restart attempts on failure					Values: (numeric value between 1 and 100)
exitcodes=0, 1															; Exit codes considered successful				Values: (exit code, separated by commas)
stopsignal=TERM															; Signal to stop the process					Values: (1, HUP, SIGHUP, 2, INT, SIGINT, 3, QUIT, SIGQUIT, 9, KILL, SIGKILL, 15, TERM, SIGTERM, 10, USR1, SIGUSR1, 12, USR2, SIGUSR2)
stopwaitsecs=5															; Seconds to wait before killing the process	Values: (numeric value between 1 and 3600)
stopasgroup=1															; Stop process group							Values: (true, false, yes, no, 1, 0)
killasgroup=yes															; Kill process group							Values: (true, false, yes, no, 1, 0)
user=1000																; User to run the process						Values: (do not switch, username, userid)
redirect_stderr=true													; Redirect stderr to stdout						Values: (true, false, yes, no, 1, 0)
stdout_logfile=${PROCESS_NAME}.log										; Stdout log file								Values: (auto, none, absolute or relative path; supports tilde expansion; file does not need to exist)
stdout_logfile_maxbytes=0												; Max stdout log size (rotation)				Values: (numeric value between 0 and 1GB; accepts bytes, B, KB, MB, or GB as suffix; does not accept fractional values such as 0.5GB)
stdout_logfile_backups=0												; Stdout log backups (rotation)					Values: (numeric value between 0 and 1000)
stdout_logfile_syslog=false												; Send stdout to syslog							Values: (true, false, yes, no, 1, 0)
stderr_logfile=${PROCESS_NAME}.log										; Stderr log file								Values: (auto, none, absolute or relative path; supports tilde expansion; file does not need to exist)
stderr_logfile_maxbytes=1500 KB											; Max stderr log size (rotation)				Values: (numeric value between 0 and 1GB; accepts bytes, B, KB, MB, or GB as suffix; does not accept fractional values such as 0.5GB)
stderr_logfile_backups=1000												; Stderr log backups (rotation)					Values: (numeric value between 0 and 1000)
stderr_logfile_syslog=false												; Send stderr to syslog							Values: (true, false, yes, no, 1, 0)
environment=VAR1='VALUE1 with variable unexpanded $HOME'				; Program environment variables					Values: (key=value pairs, separated by commas)
serverurl=auto															; Server URL for communication (INET)			Values: (http(s):// followed by hostname or IP address, optionally followed by :port, where port is a numeric value between 1 and 65535)

[group:mygroup]
programs=date, ls														; Programs included in the group				Values: (program names, separated by commas)
priority=800															; Group priority								Values: (numeric value between 0 and 999)

[include]
files=/home/kobay/taskmaster/Taskmasterd/etc/conf.d/[m-z][!p][^a-d]*am?'.'conf									; Additional config files						Values: (absolute or relative path; supports tilde expansion and globbing; file must exist)

[unix_http_server]
file=~/taskmaster.sock													; UNIX socket for communication					Values: (absolute or relative path; supports tilde expansion; file does not need to exist)
chmod=0777																; Socket permissions							Values: (octal notation)
chown=1002																; Socket owner:group							Values: (user, optionally followed by :group; both user and group can be specified either by name or by numeric ID)
username=kobayashi														; Username for authentication					Values: (string value)
password=123456															; Password for authentication					Values: (string value or hash in the format {SHA}value)

[inet_http_server]
port=localhost:4242														; INET server port								Values: (hostname, IP address, '*', or empty, followed by mandatory :port, where port is a numeric value between 1 and 65535)
username=kobayashi														; Username for authentication					Values: (string value)
password=123456															; Password for authentication					Values: (string value or hash in the format {SHA}value)

; NOTES:
;
;	For taskmasterd to start, the configuration file must be error-free
;	All values support single and double quotes, escape characters, and variable expansion using $VAR or expressions like ${VAR:modifiers}
